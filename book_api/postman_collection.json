{
	"info": {
		"_postman_id": "a40f85db-4d23-45d0-8758-a8a716e1b3d4",
		"name": "Books API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30727541",
		"_collection_link": "https://speeding-crescent-75883.postman.co/workspace/Simple-Books-API~0e79d199-39de-455c-b72d-8205e1921540/collection/30727541-a40f85db-4d23-45d0-8758-a8a716e1b3d4?action=share&source=collection_link&creator=30727541"
	},
	"item": [
		{
			"name": "Status",
			"item": [
				{
					"name": "API Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { // POSSO SUBSTITUIR O function POR => \r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"console.log(response['status']);\r",
									"\r",
									"pm.test(\"Status should be OK\", () => {\r",
									"    pm.expect(response.status).to.eql(\"OK\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"List of books\"); //ESTOU DIZENDO QUAL O PROXIMO ENDPOINT A SER SEGUIDO. \r",
									"// ISSO PORQUE EU NÃO QUERIA PASSAR O ENDPOINT => REGISTER API CLIENT, PULEI ELA E FUI PARA O PROX"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List of books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"\r",
									"});\r",
									"const response = pm.response.json();\r",
									"const nonFictionBooks = response.filter((book) => book.available === true);\r",
									"const book = nonFictionBooks[0];\r",
									"\r",
									"pm.test(\"Book found\",() => {\r",
									"    pm.expect(book).to.be.an('object');\r",
									"    pm.expect(book.available).to.be.true;\r",
									"    pm.expect(book.available).to.eql(true);\r",
									"//  pm.expect(book.type).to.eql(\"non-fiction\");\r",
									"//  pm.expect(book.name).to.eql(\"Untamed\");\r",
									"//  pm.expect(book.id).to.eql(5);\r",
									"  \r",
									"});\r",
									"pm.globals.set(\"bookId\", book.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?type=non-fiction",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "non-fiction"
								},
								{
									"key": "limit",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"\r",
									"})\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Is in stock\", () => {\r",
									"    pm.expect(response['current-stock']).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books/:bookId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								":bookId"
							],
							"variable": [
								{
									"key": "bookId",
									"value": "{{bookId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201)\r",
									"\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"orderId\", response.orderId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "acce",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookId\": {{bookId}},\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all book orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "acce",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "acce",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404)\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "acce",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\": \"John {{$randomLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:ordersId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":ordersId"
							],
							"variable": [
								{
									"key": "ordersId",
									"value": "msab5CGFHA725fQZsjr3T"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204)\r",
									"\r",
									"});\r",
									"postman.setNextRequest(null);// PARAR A EXECUÇÃO AQUI. MSM QUE HAVA MAIS ENDPOINTS ABAIXO."
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "acce",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\": \"John {{$randomLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:ordersId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":ordersId"
							],
							"variable": [
								{
									"key": "ordersId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register API Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201)\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientName\": \"{{$randomFullName}}\",\r\n    \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "4bc50233827e8ab0b9b20d098055e3a7904589101ef11a7ddbb793d3ed577ffa",
			"type": "string"
		}
	]
}